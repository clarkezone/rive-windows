namespace WinRive
{
    struct StateMachineInfo
    {
        String Name;
        Int32 Index;
        Boolean IsDefault;
    };

    struct StateMachineInput
    {
        String Name;
        String Type; // "Boolean", "Number", "Trigger"
        Boolean BooleanValue;
        Double NumberValue;
    };

    [default_interface]
    runtimeclass RiveControl
    {
        RiveControl();
        
        // Initialize the Rive renderer with compositor and dimensions
        Boolean Initialize(Windows.UI.Composition.Compositor compositor, Int32 width, Int32 height);
        
        // Return the root visual of the Rive content tree
        Windows.UI.Composition.Visual GetVisual();
        
        // Load a Rive file from a path
        Boolean LoadRiveFile(String filePath);
        
        // Load a Rive file from a package
        Boolean LoadRiveFileFromPackage(String relativePath);
        
        // Control the rendering
        void StartRenderLoop();
        void StopRenderLoop();
        void PauseRendering();
        void ResumeRendering();
        
        // Update the size of the renderer
        void SetSize(Int32 width, Int32 height);
        
        // Clean up resources
        void Shutdown();

        // State machine enumeration
        Windows.Foundation.Collections.IVectorView<StateMachineInfo> GetStateMachines();
        StateMachineInfo GetDefaultStateMachine();
        Int32 GetStateMachineCount();

        // State machine control
        Boolean SetActiveStateMachine(Int32 index);
        Boolean SetActiveStateMachineByName(String name);
        Int32 GetActiveStateMachineIndex();

        // State machine playback control
        void PlayStateMachine();
        void PauseStateMachine();
        void ResetStateMachine();
        Boolean IsStateMachineActive();

        // Input control - host applications call these methods directly
        Windows.Foundation.Collections.IVectorView<StateMachineInput> GetStateMachineInputs();
        Boolean SetBooleanInput(String inputName, Boolean value);
        Boolean SetNumberInput(String inputName, Double value);
        Boolean FireTrigger(String inputName);
        
        // Direct input methods for host applications to call
        void QueuePointerMove(Single x, Single y);
        void QueuePointerPress(Single x, Single y);
        void QueuePointerRelease(Single x, Single y);
    }
}
