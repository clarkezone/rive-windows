namespace WinRive
{
    struct StateMachineInfo
    {
        String Name;
        Int32 Index;
        Boolean IsDefault;
    };

    struct StateMachineInput
    {
        String Name;
        String Type; // "Boolean", "Number", "Trigger"
        Boolean BooleanValue;
        Double NumberValue;
    };

    struct ViewModelInfo
    {
        String Name;
        Int32 Index;
        Int32 Id;
    };

    enum ViewModelPropertyType
    {
        String,
        Number,
        Boolean,
        Color,
        Enum,
        Trigger
    };

    struct ViewModelPropertyInfo
    {
        String Name;
        ViewModelPropertyType Type;
        Int32 Index;
    };

    [default_interface]
    runtimeclass ViewModel
    {
        ViewModel();
        
        // Basic info
        String Name { get; };
        Int32 Index { get; };
        Int32 Id { get; };
        
        // Property enumeration
        Windows.Foundation.Collections.IVectorView<ViewModelPropertyInfo> GetProperties();
        Int32 GetPropertyCount();
        ViewModelPropertyInfo GetPropertyAt(Int32 index);
        ViewModelPropertyInfo GetPropertyByName(String name);
    }

    runtimeclass ViewModelInstanceProperty;

    [default_interface]
    runtimeclass ViewModelInstance
    {
        ViewModelInstance();
        
        // Associated view model
        ViewModel ViewModel { get; };
        
        // Property access
        Windows.Foundation.Collections.IVectorView<ViewModelInstanceProperty> GetProperties();
        ViewModelInstanceProperty GetProperty(String name);
        ViewModelInstanceProperty GetPropertyAt(Int32 index);
        Int32 GetPropertyCount();
        
        // Bulk operations
        Boolean SetStringProperty(String name, String value);
        Boolean SetNumberProperty(String name, Double value);
        Boolean SetBooleanProperty(String name, Boolean value);
        Boolean SetColorProperty(String name, UInt32 color);
        Boolean SetEnumProperty(String name, Int32 value);
        Boolean FireTrigger(String name);
        
        // Validation
        Boolean IsValid();
        
        // Events
        event Windows.Foundation.TypedEventHandler<ViewModelInstance, ViewModelInstanceProperty> PropertyChanged;
    }

    [default_interface]
    runtimeclass ViewModelInstanceProperty
    {
        ViewModelInstanceProperty();
        
        // Basic info
        String Name { get; };
        ViewModelPropertyType Type { get; };
        Int32 Index { get; };
        
        // Value access - use Object to support different types
        Object Value { get; set; };
        
        // Type-safe accessors
        String StringValue { get; set; };
        Double NumberValue { get; set; };
        Boolean BooleanValue { get; set; };
        UInt32 ColorValue { get; set; };
        Int32 EnumValue { get; set; };
        
        // Trigger support
        void Fire();
        
        // Validation
        Boolean IsValid();
        
        // Events
        event Windows.Foundation.TypedEventHandler<ViewModelInstanceProperty, Object> ValueChanged;
    }

    [default_interface]
    runtimeclass RiveControl
    {
        RiveControl();
        
        // Initialize the Rive renderer with compositor and dimensions
        Boolean Initialize(Windows.UI.Composition.Compositor compositor, Int32 width, Int32 height);
        
        // Return the root visual of the Rive content tree
        Windows.UI.Composition.Visual GetVisual();
        
        // Load a Rive file from a path
        Boolean LoadRiveFile(String filePath);
        
        // Load a Rive file from a package
        Boolean LoadRiveFileFromPackage(String relativePath);
        
        // Control the rendering
        void StartRenderLoop();
        void StopRenderLoop();
        void PauseRendering();
        void ResumeRendering();
        
        // Update the size of the renderer
        void SetSize(Int32 width, Int32 height);
        
        // Clean up resources
        void Shutdown();

        // State machine enumeration
        Windows.Foundation.Collections.IVectorView<StateMachineInfo> GetStateMachines();
        StateMachineInfo GetDefaultStateMachine();
        Int32 GetStateMachineCount();

        // State machine control
        Boolean SetActiveStateMachine(Int32 index);
        Boolean SetActiveStateMachineByName(String name);
        Int32 GetActiveStateMachineIndex();

        // State machine playback control
        void PlayStateMachine();
        void PauseStateMachine();
        void ResetStateMachine();
        Boolean IsStateMachineActive();

        // Input control - host applications call these methods directly
        Windows.Foundation.Collections.IVectorView<StateMachineInput> GetStateMachineInputs();
        Boolean SetBooleanInput(String inputName, Boolean value);
        Boolean SetNumberInput(String inputName, Double value);
        Boolean FireTrigger(String inputName);
        
        // Direct input methods for host applications to call
        void QueuePointerMove(Single x, Single y);
        void QueuePointerPress(Single x, Single y);
        void QueuePointerRelease(Single x, Single y);

        // View model enumeration
        Windows.Foundation.Collections.IVectorView<ViewModelInfo> GetViewModels();
        Int32 GetViewModelCount();
        ViewModel GetViewModelAt(Int32 index);
        ViewModel GetViewModelByName(String name);
        ViewModel GetDefaultViewModel();
        
        // View model instance management
        ViewModelInstance CreateViewModelInstance();
        ViewModelInstance CreateViewModelInstanceById(Int32 viewModelId);
        ViewModelInstance CreateViewModelInstanceByName(String viewModelName);
        Boolean BindViewModelInstance(ViewModelInstance instance);
        ViewModelInstance GetBoundViewModelInstance();
        
        // Direct property access (convenience methods)
        Boolean SetViewModelStringProperty(String propertyName, String value);
        Boolean SetViewModelNumberProperty(String propertyName, Double value);
        Boolean SetViewModelBooleanProperty(String propertyName, Boolean value);
        Boolean SetViewModelColorProperty(String propertyName, UInt32 color);
        Boolean SetViewModelEnumProperty(String propertyName, Int32 value);
        Boolean FireViewModelTrigger(String triggerName);
        
        // Events
        event Windows.Foundation.TypedEventHandler<RiveControl, ViewModelInstance> ViewModelInstanceBound;
        event Windows.Foundation.TypedEventHandler<RiveControl, ViewModelInstanceProperty> ViewModelPropertyChanged;
    }
}
